def organization = 'TYPO3-cookbooks'
def userType = 'orgs' // 'orgs' or 'users'
def repoFilter = ~/.*/

repoApi = new URL("https://api.github.com/${userType}/${organization}/repos?per_page=100")
repos = new groovy.json.JsonSlurper().parse(repoApi.newReader())

repos.findAll{ r -> r.name =~ repoFilter }.each {

  def repoName = it.name
  def jobBaseName = "cookbook-${repoName}".replaceAll('/','-')
  def branchName = "master"

  workflowJob('cookbook-pipeline-' + jobBaseName) {
    definition {
      cps {
        script('''
node {
  stage 'clone cookbook'
  git url: 'https://github.com/TYPO3-cookbooks/''' + repoName + '''.git', clean: true
  // we e.g. have a .kitchen.docker.yml left from the last run. Remove that using "clean: true"

  stage 'foodcritic'
  sh 'foodcritic . -f all'

  stage 'berks'
  sh 'berks install'

  stage 'testkitchen'
  if (fileExists('.kitchen.docker.yml')) {
    echo 'Using the cookbooks .kitchen.docker.yml'
  } else {
    echo 'Placing default .kitchen.docker.yml file in workspace'
    writeFile file: '.kitchen.docker.yml', text: \'\'\'driver:\\n  name: docker\\n  use_sudo: false\'\'\'
  }
  // it is okay-ish for us at the current state, if kitchen fails
  catchError {
    withEnv(["KITCHEN_LOCAL_YAML=.kitchen.docker.yml"]) {
      sh '[ -f .kitchen.yml ] || exit 0;  kitchen test'
    }
  }
  stage 'upload'
  input 'Do you want to upload?'
  sh 'berks upload'
}
        ''')
      }
    }
  }

}
