#!groovy
def organization = 'TYPO3-cookbooks'
def userType = 'orgs' // 'orgs' or 'users'
def repoFilter = ~/.*/

repoApi = new URL("https://api.github.com/${userType}/${organization}/repos?per_page=100")
repos = new groovy.json.JsonSlurper().parse(repoApi.newReader())

repos.findAll{ r -> r.name =~ repoFilter }.each {

  def repoName = it.name
  def jobName = "chef-cookbook-${repoName}".replaceAll('/','-')

  workflowJob(jobName) {
    displayName("Chef Cookbook: ${repoName}")

    properties {
        githubProjectUrl("https://github.com/${organization}/${repoName}")
    }

    triggers() {
      githubPush()
      // as of now, the ghprb plugin is not yet pipeline-compatible - see
      // https://github.com/jenkinsci/pipeline-plugin/blob/master/COMPATIBILITY.md
      // githubPullRequest {
      //   cron('H/5 * * * *')
      //   useGitHubHooks()
      //   permitAll()
      // }
    }

    definition {
      cps {
        script(readFileFromWorkspace('seed-workflow.groovy))
      }
    }
  }

}


///////////////////////////////
// main chef-repo
///////////////////////////////

job('chef-repo') {

  displayName('Main Chef repo')

  scm {
    git("<%= node['t3chefjenkins']['main_repo'] %>", "steffen-test")
  }


  wrappers {
    colorizeOutput('xterm')
  }

  steps {
    // at first, we finalize the config so that we can still connect to the chef server (by symlinking ~/.chef/config.rb)
    shell('[ -h ".chef/knife.local.rb" ] && true || ln -s ~/.chef/config.rb .chef/knife.local.rb')


    shell('scripts/upload-changes.sh $GIT_PREVIOUS_COMMIT..$GIT_COMMIT')
  }
}
